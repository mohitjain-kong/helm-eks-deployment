# Kong for Kubernetes with Kong Enterprise with Enterprise features enabled and
# exposed via TLS-enabled Ingresses. Before installing:
# * Several settings (search for the string "CHANGEME") require user-provided
#   Secrets. These Secrets must be created before installation.
# * Ingresses reference example "<service>.kong.CHANGEME.example" hostnames. These must
#   be changed to an actual hostname that resolve to your proxy.
# * Ensure that your session configurations create cookies that are usable
#   across your services. The admin session configuration must create cookies
#   that are sent to both the admin API and Kong Manager, and any Dev Portal
#   instances with authentication must create cookies that are sent to both
#   the Portal and Portal API.

image:
  repository: kong/kong-gateway
  tag: 2.8.1.2-alpine
  pullPolicy: IfNotPresent

env:
  database: postgres
  proxy_access_log: /dev/stdout
  admin_access_log: /dev/stdout
  admin_gui_access_log: /dev/stdout
  portal_api_access_log: /dev/stdout
  proxy_error_log: /dev/stderr
  admin_error_log: /dev/stderr
  admin_gui_error_log: /dev/stderr
  portal_api_error_log: /dev/stderr
  prefix: /kong_prefix/

  proxy_url: http://1.2.3.4
  admin_api_uri: http://admin.apps.kong.w6gk.p1.openshiftapps.com
  admin_gui_url: http://manager.apps.kong.w6gk.p1.openshiftapps.com
  portal_gui_host: portal.apps.kong.w6gk.p1.openshiftapps.com
  portal_api_url: http://portalapi.apps.kong.w6gk.p1.openshiftapps.com
  portal_gui_protocol: http
  
  #Database Information
  pg_host: postgres.databases
  pg_user: kong
  pg_database: kong
  pg_password: kong
  
  # Super User Password
  password: kong
  #password:


admin:
  enabled: true
  type: NodePort
  annotations:
    kubernetes.io/ingress.class: alb
  http:
    enabled: true
    servicePort: 8001
    containerPort: 8001
  tls:
    enabled: false
    servicePort: 8444
    containerPort: 8444
    parameters:
      - http2
  ingress:
    enabled: true
    hostname: admin.apps.kong.w6gk.p1.openshiftapps.com
    annotations:
      kubernetes.io/ingress.class: "kong"
    path: /
proxy:
  enabled: true
  type: LoadBalancer
  annotations:
    kubernetes.io/ingress.class: alb
  http:
    enabled: true
    servicePort: 80
    containerPort: 8000
    parameters: []
  tls:
    enabled: false
    servicePort: 443
    containerPort: 8443
    parameters:
      - http2
  stream: {}
  ingress:
    enabled: true
    hostname: proxy.apps.kong.w6gk.p1.openshiftapps.com
    annotations: {}
    path: /
  externalIPs: []
enterprise:
  enabled: true
  # CHANGEME: https://github.com/Kong/charts/blob/main/charts/kong/README.md#kong-enterprise-license
  license_secret: kong-enterprise-license
  vitals:
    enabled: true
  portal:
    enabled: true
  rbac:
    enabled: false
    admin_gui_auth: basic-auth
    session_conf_secret: kong-session-config
    admin_gui_auth_conf_secret: CHANGEME-admin-gui-auth-conf-secret
  smtp:
    enabled: false
    portal_emails_from: none@example.com
    portal_emails_reply_to: none@example.com
    admin_emails_from: none@example.com
    admin_emails_reply_to: none@example.com
    smtp_admin_emails: none@example.com
    smtp_host: smtp.example.com
    smtp_port: 587
    smtp_auth_type: ''
    smtp_ssl: nil
    smtp_starttls: true
    auth:
      smtp_username: '' # e.g. postmaster@example.com
      smtp_password_secret: CHANGEME-smtp-password
manager:
  enabled: true
  type: NodePort
  annotations:
    kubernetes.io/ingress.class: alb
  http:
    enabled: true
    servicePort: 8002
    containerPort: 8002
  tls:
    enabled: false
    servicePort: 8445
    containerPort: 8445
    parameters:
      - http2
  ingress:
    enabled: true
    hostname: manager.apps.kong.w6gk.p1.openshiftapps.com
    annotations: {}
    path: /
  externalIPs: []
portal:
  enabled: true
  type: NodePort
  annotations:
    kubernetes.io/ingress.class: alb
  http:
    enabled: true
    servicePort: 8003
    containerPort: 8003
    parameters: []
  tls:
    enabled: false
    servicePort: 8446
    containerPort: 8446
    parameters:
      - http2
  ingress:
    enabled: true
    hostname: portal.apps.kong.w6gk.p1.openshiftapps.com
    annotations:
      kubernetes.io/ingress.class: "kong"
    path: /
  externalIPs: []
portalapi:
  enabled: true
  type: NodePort
  annotations:
    kubernetes.io/ingress.class: alb
  http:
    enabled: true
    servicePort: 8004
    containerPort: 8004
    parameters: []
  tls:
    enabled: false
    servicePort: 8447
    containerPort: 8447
    parameters:
      - http2
  ingress:
    enabled: false
    hostname: portalapi.apps.kong.w6gk.p1.openshiftapps.com
    annotations:
      kubernetes.io/ingress.class: "kong"
    path: /
  externalIPs: []
postgresql:
  enabled: false
ingressController:
  enabled: true
  image:
    repository: kong/kubernetes-ingress-controller
    tag: "2.0"
  args: []
  # Specify Kong Ingress Controller configuration via environment variables
  env:
    kong_workspace: IngressController
  admissionWebhook:
    enabled: false
    failurePolicy: Fail
    port: 8080
  ingressClass: kong
  rbac:
    # Specifies whether RBAC resources should be created
    create: true
  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: true
    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:
  installCRDs: false
  # general properties
  livenessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: "/healthz"
      port: 10254
      scheme: HTTP
    initialDelaySeconds: 5
    timeoutSeconds: 5
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  resources: {}
podAnnotations: 
  prometheus.io/scrape: "true"
  prometheus.io/port: "8100"
  kuma.io/gateway: "enabled"
  traffic.kuma.io/exclude-outbound-ports: "5432"
waitImage:
  # Wait for the database to come online before starting Kong or running migrations
  # If Kong is to access the database through a service mesh that injects a sidecar to
  # Kong's container, this must be disabled. Otherwise there'll be a deadlock:
  # InitContainer waiting for DB access that requires the sidecar, and the sidecar
  # waiting for InitContainers to finish.
  enabled: false
