# Basic configuration for Kong Enterprise without the ingress controller, using the Postgres subchart
# This installation does not create an Ingress or LoadBalancer Service for
# the Admin API. It requires port-forwards to access without further
# configuration to add them, e.g.:
# kubectl port-forward deploy/your-deployment-kong 8001:8001
# Before installing:
# * Several settings (search for the string "CHANGEME") require user-provided
#   Secrets. These Secrets must be created before installation.
# * Ensure that your session configurations create cookies that are usable
#   across your services. The admin session configuration must create cookies
#   that are sent to both the admin API and Kong Manager, and any Dev Portal
#   instances with authentication must create cookies that are sent to both
#   the Portal and Portal API.
image:
  repository: kong/kong-gateway
  tag: "latest"
env:
  database: postgres
  # pg_host: kong-hybrid-cp-postgresql.kong-hybrid-cp.svc.cluster.local
  # pg_user: kong
  # pg_database: kong
  # pg_host: kong-merck.cluster-clnyeikrm0os.eu-west-2.rds.amazonaws.com
  # Set below pg host making postgreSQL false when using RDS
  pg_host: kong-merck-instance-1.clnyeikrm0os.eu-west-2.rds.amazonaws.com
  pg_user: kong
  pg_database: postgres
  pg_password: kongkong
  password:
    valueFrom:
      secretKeyRef:
        key: kong_admin_password
        name: kong-config-secret
  role: control_plane
  cluster_cert: /etc/secrets/kong-cluster-cert/tls.crt
  cluster_cert_key: /etc/secrets/kong-cluster-cert/tls.key
  # client_ssl: "on" # enable it on when setting MTLS between upstream and kong
  # client_ssl_cert: /etc/secrets/kong-cluster-cert-upstream/tls.crt # once client_ssl enabled pass certs for MTLS between upstream and kong
  # client_ssl_cert_key: /etc/secrets/kong-cluster-cert-upstream/tls.key # once client_ssl enabled pass certs for MTLS between upstream and kong
  # lua_ssl_trusted_certifcate: /etc/secrets/kong-cluster-cert-upstream/tls.crt # once client_ssl enabled set upstream cert
  admin_api_uri: http://adf98f6884c634098b8b99230d1bc023-809056493.eu-west-2.elb.amazonaws.com:8001
  admin_gui_url: http://a28fcd4810b1047279a2774ab2cde673-1306965477.eu-west-2.elb.amazonaws.com:8002
  portal_gui_host: :8003
  portal_api_url: http://:8004
  status_listen: 0.0.0.0:8100
admin:
  enabled: true
  type: LoadBalancer
  http:
    enabled: true
    servicePort: 8001
    containerPort: 8001
manager:
  enabled: true
  type: LoadBalancer
  http:
    enabled: true
    servicePort: 8002
    containerPort: 8002
cluster:
  enabled: true
  type: LoadBalancer
  tls:
    enabled: true
    servicePort: 8005
    containerPort: 8005
clustertelemetry:
  enabled: true
  type: LoadBalancer
  tls:
    enabled: true
    servicePort: 8006
    containerPort: 8006
proxy:
  enabled: false
secretVolumes:
  - kong-cluster-cert
  # - kong-cluster-cert-upstream
postgresql:
  enabled: false
  auth:
    username: kong
    database: kong
    existingSecret: kong-hybrid-cp-postgresql
ingressController:
  enabled: false
enterprise:
  enabled: true
  # See instructions regarding enterprise licenses at https://github.com/Kong/charts/blob/master/charts/kong/README.md#kong-enterprise-license
  # license_secret: kong-hybrid-cp-license # CHANGEME
  vitals:
    enabled: true
  rbac:
    enabled: true
    admin_gui_auth: basic-auth
    admin_gui_auth_conf_secret: kong-config-secret
    session_conf_secret: kong-config-secret
portal:
  enabled: false
portalapi:
  enabled: false
