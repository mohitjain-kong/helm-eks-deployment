# -----------------------------------------------------------------------------
# Kong parameters
# -----------------------------------------------------------------------------

# Specify Kong configurations
# Kong configurations guide https://docs.konghq.com/latest/configuration
# Values here take precedence over values from other sections of values.yaml,
env:
  database: "postgres"
  pg_user: kong
  pg_database: kong
  pg_password: kong
  password: kong
  proxy_access_log: /dev/stdout
  admin_access_log: /dev/stdout
  admin_gui_access_log: /dev/stdout
  portal_api_access_log: /dev/stdout
  proxy_error_log: /dev/stderr
  admin_error_log: /dev/stderr
  admin_gui_error_log: /dev/stderr
  portal_api_error_log: /dev/stderr
  prefix: /kong_prefix/
  proxy_url: DUMMY_PROXY_URL
  admin_gui_url: DUMMY_MANAGER_URL
  admin_api_uri: DUMMY_ADMIN_URL
  portal_gui_host: DUMMY_PORTAL_HOST
  portal_api_url: DUMMY_PORTAL_API_URL
  portal_gui_protocol: http
  ontrusted_lua: on
#  portal_session_conf:
#    valueFrom:
#      secretKeyRef:
#        key: kong-session-config
#        name: portal_session_conf


image:
  repository: kong/kong-gateway
  tag: 2.8.1.2-alpine
  pullPolicy: IfNotPresent

admin:
  enabled: true
  type: LoadBalancer
  loadBalancerIP: "1.2.3.4"
  annotations: 
    service.beta.kubernetes.io/azure-load-balancer-resource-group: Kong
  http:
    enabled: true
    servicePort: 80
    containerPort: 8001
    parameters: []
  tls:
    enabled: false
    servicePort: 8444
    containerPort: 8444
    parameters:
    - http2
  ingress:
    enabled: false
    # TLS secret name.
    # tls: kong-admin.example.com-tls
    # Ingress hostname
    hostname:
    # Map of ingress annotations.
    annotations: {}
    # Ingress path.
    path: /

proxy:
  enabled: true
  type: LoadBalancer
  loadBalancerIP: "1.2.3.4"
  annotations: 
    service.beta.kubernetes.io/azure-load-balancer-resource-group: Kong
  http:
    # Enable plaintext HTTP listen for the proxy
    enabled: true
    servicePort: 80
    containerPort: 8000
    parameters: []
  tls:
    # Enable HTTPS listen for the proxy
    enabled: false
    servicePort: 443
    containerPort: 8443
    parameters:
    - http2
  ingress:
    # Enable/disable exposure using ingress.
    enabled: false
    hosts: []
    # TLS section. Unlike other ingresses, this follows the format at
    # https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    # tls:
    # - hosts:
    #   - 1.example.com
    #   secretName: example1-com-tls-secret
    # - hosts:
    #   - 2.example.net
    #   secretName: example2-net-tls-secret
    # Map of ingress annotations.
    annotations: {}
    # Ingress path.
    path: /

  externalIPs: []

# secretVolumes:
# - kong-proxy-tls
# - kong-admin-tls
secretVolumes: []

# Set runMigrations to run Kong migrations
runMigrations: true

# -----------------------------------------------------------------------------
# Ingress Controller parameters
# -----------------------------------------------------------------------------

ingressController:
  enabled: true
  image:
    repository: kong/kubernetes-ingress-controller
  args: []
  env: {}
  admissionWebhook:
    enabled: true
    failurePolicy: Fail
    port: 8080
  ingressClass: kong

  rbac:
    create: true

  serviceAccount:
    create: true
    # If not set and create is true, a name is generated using the fullname template
    name:

  installCRDs: false

postgresql:
  enabled: true
  auth:
    username: kong
    password: kong
    database: kong
  persistence:
    existingClaim: pvc-postgres-kong

# Annotations to be added to Kong deployment
deploymentAnnotations:
  kuma.io/gateway: enabled
  traffic.sidecar.istio.io/includeInboundPorts: ""

# Enable autoscaling using HorizontalPodAutoscaler
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  # targetCPUUtilizationPercentage:
  ## Otherwise for clusters that do support autoscaling/v2beta, use metrics
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80

# Kong Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  maxUnavailable: "50%"

podSecurityPolicy:
  enabled: false

priorityClassName: ""

# securityContext for Kong pods.
securityContext:
  runAsUser: 1000

# -----------------------------------------------------------------------------
# Kong Enterprise parameters
# -----------------------------------------------------------------------------

# Toggle Kong Enterprise features on or off
# RBAC and SMTP configuration have additional options that must all be set together
# Other settings should be added to the "env" settings below
enterprise:
  enabled: true
  license_secret: kong-enterprise-license
  vitals:
    enabled: true
  portal:
    enabled: true
    session_conf_secret: kong-session-config
  rbac:
    enabled: false
    admin_gui_auth: basic-auth
    session_conf_secret: kong-session-config
    admin_gui_auth_conf_secret: admin_gui_session_conf
  smtp:
    enabled: false
    portal_emails_from: none@example.com
    portal_emails_reply_to: none@example.com
    admin_emails_from: none@example.com
    admin_emails_reply_to: none@example.com
    smtp_admin_emails: none@example.com
    smtp_host: smtp.example.com
    smtp_port: 587
    smtp_starttls: true
    auth:
      smtp_username: ''  # e.g. postmaster@example.com
      smtp_password_secret: you-must-create-an-smtp-password

manager:
  # Enable creating a Kubernetes service for Kong Manager
  enabled: true
  type: LoadBalancer
  loadBalancerIP: "1.2.3.4"
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: Kong
  http:
    # Enable plaintext HTTP listen for Kong Manager
    enabled: true
    servicePort: 80
    containerPort: 8002
    parameters: []
  tls:
    # Enable HTTPS listen for Kong Manager
    enabled: false
    servicePort: 8445
    containerPort: 8445
    parameters:
    - http2
  ingress:
    # Enable/disable exposure using ingress.
    enabled: false
    # TLS secret name.
    # tls: kong-proxy.example.com-tls
    # Ingress hostname
    hostname:
    # Map of ingress annotations.
    annotations: {}
    # Ingress path.
    path: /

  externalIPs: []

portal:
  # Enable creating a Kubernetes service for the Developer Portal
  enabled: true
  type: LoadBalancer
  loadBalancerIP: "1.2.3.4"
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-resource-group: Kong
  http:
    # Enable plaintext HTTP listen for the Developer Portal
    enabled: true
    servicePort: 80
    containerPort: 8003
    parameters: []
  tls:
    # Enable HTTPS listen for the Developer Portal
    enabled: false
    servicePort: 8446
    containerPort: 8446
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32443
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters:
    - http2
  ingress:
    # Enable/disable exposure using ingress.
    enabled: false
    # TLS secret name.
    # tls: kong-proxy.example.com-tls
    # Ingress hostname
    hostname:
    # Map of ingress annotations.
    annotations: {}
    # Ingress path.
    path: /

  externalIPs: []

portalapi:
  # Enable creating a Kubernetes service for the Developer Portal API
  enabled: true
  type: LoadBalancer
  loadBalancerIP: "1.2.3.4"
  annotations: 
    service.beta.kubernetes.io/azure-load-balancer-resource-group: Kong
  http:
    # Enable plaintext HTTP listen for the Developer Portal API
    enabled: true
    servicePort: 80
    containerPort: 8004
    parameters: []
  tls:
    # Enable HTTPS listen for the Developer Portal API
    enabled: false
    servicePort: 8447
    containerPort: 8447
    parameters:
    - http2
  ingress:
    # Enable/disable exposure using ingress.
    enabled: false
    # TLS secret name.
    # tls: kong-proxy.example.com-tls
    # Ingress hostname
    hostname:
    # Map of ingress annotations.
    annotations: {}
    # Ingress path.
    path: /
  externalIPs: []
